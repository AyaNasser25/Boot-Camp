
OS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007d0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000844  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002c  00800060  00800060  00000844  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000844  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000874  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  000008b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000acf  00000000  00000000  000009a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007c8  00000000  00000000  00001477  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007d7  00000000  00000000  00001c3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002a8  00000000  00000000  00002418  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004a5  00000000  00000000  000026c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004cd  00000000  00000000  00002b65  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00003032  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 33 02 	jmp	0x466	; 0x466 <__vector_10>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	ac 38       	cpi	r26, 0x8C	; 140
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 bf 01 	call	0x37e	; 0x37e <main>
  74:	0c 94 e6 03 	jmp	0x7cc	; 0x7cc <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_SetPinDirection>:
	else if(PinNum >=24 && PinNum <=31){
		return (Get_Bit(PIND,(PinNum-24)));
	}
}

void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection){
  7c:	cf 93       	push	r28
  7e:	df 93       	push	r29
  80:	00 d0       	rcall	.+0      	; 0x82 <DIO_SetPinDirection+0x6>
  82:	cd b7       	in	r28, 0x3d	; 61
  84:	de b7       	in	r29, 0x3e	; 62
  86:	89 83       	std	Y+1, r24	; 0x01
  88:	6a 83       	std	Y+2, r22	; 0x02
	if(PinNum >=0 && PinNum <=7){
  8a:	89 81       	ldd	r24, Y+1	; 0x01
  8c:	88 30       	cpi	r24, 0x08	; 8
  8e:	98 f5       	brcc	.+102    	; 0xf6 <DIO_SetPinDirection+0x7a>
		switch(PinDirection){
  90:	8a 81       	ldd	r24, Y+2	; 0x02
  92:	88 2f       	mov	r24, r24
  94:	90 e0       	ldi	r25, 0x00	; 0
  96:	00 97       	sbiw	r24, 0x00	; 0
  98:	c1 f0       	breq	.+48     	; 0xca <DIO_SetPinDirection+0x4e>
  9a:	01 97       	sbiw	r24, 0x01	; 1
  9c:	09 f0       	breq	.+2      	; 0xa0 <DIO_SetPinDirection+0x24>
			case 1 : Set_Bit(DDRA,PinNum);
			break;
			case 0 : Clear_Bit(DDRA,PinNum);
			break;
			default :
			break ;
  9e:	ec c0       	rjmp	.+472    	; 0x278 <DIO_SetPinDirection+0x1fc>
}

void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection){
	if(PinNum >=0 && PinNum <=7){
		switch(PinDirection){
			case 1 : Set_Bit(DDRA,PinNum);
  a0:	8a e3       	ldi	r24, 0x3A	; 58
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	2a e3       	ldi	r18, 0x3A	; 58
  a6:	30 e0       	ldi	r19, 0x00	; 0
  a8:	f9 01       	movw	r30, r18
  aa:	20 81       	ld	r18, Z
  ac:	62 2f       	mov	r22, r18
  ae:	29 81       	ldd	r18, Y+1	; 0x01
  b0:	42 2f       	mov	r20, r18
  b2:	50 e0       	ldi	r21, 0x00	; 0
  b4:	21 e0       	ldi	r18, 0x01	; 1
  b6:	30 e0       	ldi	r19, 0x00	; 0
  b8:	02 c0       	rjmp	.+4      	; 0xbe <DIO_SetPinDirection+0x42>
  ba:	22 0f       	add	r18, r18
  bc:	33 1f       	adc	r19, r19
  be:	4a 95       	dec	r20
  c0:	e2 f7       	brpl	.-8      	; 0xba <DIO_SetPinDirection+0x3e>
  c2:	26 2b       	or	r18, r22
  c4:	fc 01       	movw	r30, r24
  c6:	20 83       	st	Z, r18
			break;
  c8:	d7 c0       	rjmp	.+430    	; 0x278 <DIO_SetPinDirection+0x1fc>
			case 0 : Clear_Bit(DDRA,PinNum);
  ca:	8a e3       	ldi	r24, 0x3A	; 58
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	2a e3       	ldi	r18, 0x3A	; 58
  d0:	30 e0       	ldi	r19, 0x00	; 0
  d2:	f9 01       	movw	r30, r18
  d4:	20 81       	ld	r18, Z
  d6:	62 2f       	mov	r22, r18
  d8:	29 81       	ldd	r18, Y+1	; 0x01
  da:	42 2f       	mov	r20, r18
  dc:	50 e0       	ldi	r21, 0x00	; 0
  de:	21 e0       	ldi	r18, 0x01	; 1
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <DIO_SetPinDirection+0x6c>
  e4:	22 0f       	add	r18, r18
  e6:	33 1f       	adc	r19, r19
  e8:	4a 95       	dec	r20
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <DIO_SetPinDirection+0x68>
  ec:	20 95       	com	r18
  ee:	26 23       	and	r18, r22
  f0:	fc 01       	movw	r30, r24
  f2:	20 83       	st	Z, r18
			break;
  f4:	c1 c0       	rjmp	.+386    	; 0x278 <DIO_SetPinDirection+0x1fc>
			default :
			break ;
		}
	}
	else if(PinNum >=8 && PinNum <=15){
  f6:	89 81       	ldd	r24, Y+1	; 0x01
  f8:	88 30       	cpi	r24, 0x08	; 8
  fa:	08 f4       	brcc	.+2      	; 0xfe <DIO_SetPinDirection+0x82>
  fc:	3d c0       	rjmp	.+122    	; 0x178 <DIO_SetPinDirection+0xfc>
  fe:	89 81       	ldd	r24, Y+1	; 0x01
 100:	80 31       	cpi	r24, 0x10	; 16
 102:	d0 f5       	brcc	.+116    	; 0x178 <DIO_SetPinDirection+0xfc>
		switch(PinDirection){
 104:	8a 81       	ldd	r24, Y+2	; 0x02
 106:	88 2f       	mov	r24, r24
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	00 97       	sbiw	r24, 0x00	; 0
 10c:	d9 f0       	breq	.+54     	; 0x144 <DIO_SetPinDirection+0xc8>
 10e:	01 97       	sbiw	r24, 0x01	; 1
 110:	09 f0       	breq	.+2      	; 0x114 <DIO_SetPinDirection+0x98>
			case 1 : Set_Bit(DDRB,(PinNum-8));
			break;
			case 0 : Clear_Bit(DDRB,(PinNum-8));
			break;
			default :
			break ;
 112:	31 c0       	rjmp	.+98     	; 0x176 <DIO_SetPinDirection+0xfa>
			break ;
		}
	}
	else if(PinNum >=8 && PinNum <=15){
		switch(PinDirection){
			case 1 : Set_Bit(DDRB,(PinNum-8));
 114:	87 e3       	ldi	r24, 0x37	; 55
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	27 e3       	ldi	r18, 0x37	; 55
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	f9 01       	movw	r30, r18
 11e:	20 81       	ld	r18, Z
 120:	62 2f       	mov	r22, r18
 122:	29 81       	ldd	r18, Y+1	; 0x01
 124:	22 2f       	mov	r18, r18
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	a9 01       	movw	r20, r18
 12a:	48 50       	subi	r20, 0x08	; 8
 12c:	51 09       	sbc	r21, r1
 12e:	21 e0       	ldi	r18, 0x01	; 1
 130:	30 e0       	ldi	r19, 0x00	; 0
 132:	02 c0       	rjmp	.+4      	; 0x138 <DIO_SetPinDirection+0xbc>
 134:	22 0f       	add	r18, r18
 136:	33 1f       	adc	r19, r19
 138:	4a 95       	dec	r20
 13a:	e2 f7       	brpl	.-8      	; 0x134 <DIO_SetPinDirection+0xb8>
 13c:	26 2b       	or	r18, r22
 13e:	fc 01       	movw	r30, r24
 140:	20 83       	st	Z, r18
			break;
 142:	19 c0       	rjmp	.+50     	; 0x176 <DIO_SetPinDirection+0xfa>
			case 0 : Clear_Bit(DDRB,(PinNum-8));
 144:	87 e3       	ldi	r24, 0x37	; 55
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	27 e3       	ldi	r18, 0x37	; 55
 14a:	30 e0       	ldi	r19, 0x00	; 0
 14c:	f9 01       	movw	r30, r18
 14e:	20 81       	ld	r18, Z
 150:	62 2f       	mov	r22, r18
 152:	29 81       	ldd	r18, Y+1	; 0x01
 154:	22 2f       	mov	r18, r18
 156:	30 e0       	ldi	r19, 0x00	; 0
 158:	a9 01       	movw	r20, r18
 15a:	48 50       	subi	r20, 0x08	; 8
 15c:	51 09       	sbc	r21, r1
 15e:	21 e0       	ldi	r18, 0x01	; 1
 160:	30 e0       	ldi	r19, 0x00	; 0
 162:	02 c0       	rjmp	.+4      	; 0x168 <DIO_SetPinDirection+0xec>
 164:	22 0f       	add	r18, r18
 166:	33 1f       	adc	r19, r19
 168:	4a 95       	dec	r20
 16a:	e2 f7       	brpl	.-8      	; 0x164 <DIO_SetPinDirection+0xe8>
 16c:	20 95       	com	r18
 16e:	26 23       	and	r18, r22
 170:	fc 01       	movw	r30, r24
 172:	20 83       	st	Z, r18
			break;
 174:	00 00       	nop
			default :
			break ;
		}
	}
 176:	80 c0       	rjmp	.+256    	; 0x278 <DIO_SetPinDirection+0x1fc>
	else if(PinNum >=16 && PinNum <=23){
 178:	89 81       	ldd	r24, Y+1	; 0x01
 17a:	80 31       	cpi	r24, 0x10	; 16
 17c:	08 f4       	brcc	.+2      	; 0x180 <DIO_SetPinDirection+0x104>
 17e:	3d c0       	rjmp	.+122    	; 0x1fa <DIO_SetPinDirection+0x17e>
 180:	89 81       	ldd	r24, Y+1	; 0x01
 182:	88 31       	cpi	r24, 0x18	; 24
 184:	d0 f5       	brcc	.+116    	; 0x1fa <DIO_SetPinDirection+0x17e>
		switch(PinDirection){
 186:	8a 81       	ldd	r24, Y+2	; 0x02
 188:	88 2f       	mov	r24, r24
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	00 97       	sbiw	r24, 0x00	; 0
 18e:	d9 f0       	breq	.+54     	; 0x1c6 <DIO_SetPinDirection+0x14a>
 190:	01 97       	sbiw	r24, 0x01	; 1
 192:	09 f0       	breq	.+2      	; 0x196 <DIO_SetPinDirection+0x11a>
			case 1 : Set_Bit(DDRC,(PinNum-16));
			break;
			case 0 : Clear_Bit(DDRC,(PinNum-16));
			break;
			default :
			break ;
 194:	31 c0       	rjmp	.+98     	; 0x1f8 <DIO_SetPinDirection+0x17c>
			break ;
		}
	}
	else if(PinNum >=16 && PinNum <=23){
		switch(PinDirection){
			case 1 : Set_Bit(DDRC,(PinNum-16));
 196:	84 e3       	ldi	r24, 0x34	; 52
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	24 e3       	ldi	r18, 0x34	; 52
 19c:	30 e0       	ldi	r19, 0x00	; 0
 19e:	f9 01       	movw	r30, r18
 1a0:	20 81       	ld	r18, Z
 1a2:	62 2f       	mov	r22, r18
 1a4:	29 81       	ldd	r18, Y+1	; 0x01
 1a6:	22 2f       	mov	r18, r18
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	a9 01       	movw	r20, r18
 1ac:	40 51       	subi	r20, 0x10	; 16
 1ae:	51 09       	sbc	r21, r1
 1b0:	21 e0       	ldi	r18, 0x01	; 1
 1b2:	30 e0       	ldi	r19, 0x00	; 0
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <DIO_SetPinDirection+0x13e>
 1b6:	22 0f       	add	r18, r18
 1b8:	33 1f       	adc	r19, r19
 1ba:	4a 95       	dec	r20
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <DIO_SetPinDirection+0x13a>
 1be:	26 2b       	or	r18, r22
 1c0:	fc 01       	movw	r30, r24
 1c2:	20 83       	st	Z, r18
			break;
 1c4:	19 c0       	rjmp	.+50     	; 0x1f8 <DIO_SetPinDirection+0x17c>
			case 0 : Clear_Bit(DDRC,(PinNum-16));
 1c6:	84 e3       	ldi	r24, 0x34	; 52
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	24 e3       	ldi	r18, 0x34	; 52
 1cc:	30 e0       	ldi	r19, 0x00	; 0
 1ce:	f9 01       	movw	r30, r18
 1d0:	20 81       	ld	r18, Z
 1d2:	62 2f       	mov	r22, r18
 1d4:	29 81       	ldd	r18, Y+1	; 0x01
 1d6:	22 2f       	mov	r18, r18
 1d8:	30 e0       	ldi	r19, 0x00	; 0
 1da:	a9 01       	movw	r20, r18
 1dc:	40 51       	subi	r20, 0x10	; 16
 1de:	51 09       	sbc	r21, r1
 1e0:	21 e0       	ldi	r18, 0x01	; 1
 1e2:	30 e0       	ldi	r19, 0x00	; 0
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <DIO_SetPinDirection+0x16e>
 1e6:	22 0f       	add	r18, r18
 1e8:	33 1f       	adc	r19, r19
 1ea:	4a 95       	dec	r20
 1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <DIO_SetPinDirection+0x16a>
 1ee:	20 95       	com	r18
 1f0:	26 23       	and	r18, r22
 1f2:	fc 01       	movw	r30, r24
 1f4:	20 83       	st	Z, r18
			break;
 1f6:	00 00       	nop
			default :
			break ;
		}
	}
 1f8:	3f c0       	rjmp	.+126    	; 0x278 <DIO_SetPinDirection+0x1fc>
	else if(PinNum >=24 && PinNum <=31){
 1fa:	89 81       	ldd	r24, Y+1	; 0x01
 1fc:	88 31       	cpi	r24, 0x18	; 24
 1fe:	e0 f1       	brcs	.+120    	; 0x278 <DIO_SetPinDirection+0x1fc>
 200:	89 81       	ldd	r24, Y+1	; 0x01
 202:	80 32       	cpi	r24, 0x20	; 32
 204:	c8 f5       	brcc	.+114    	; 0x278 <DIO_SetPinDirection+0x1fc>
		switch(PinDirection){
 206:	8a 81       	ldd	r24, Y+2	; 0x02
 208:	88 2f       	mov	r24, r24
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	00 97       	sbiw	r24, 0x00	; 0
 20e:	d9 f0       	breq	.+54     	; 0x246 <DIO_SetPinDirection+0x1ca>
 210:	01 97       	sbiw	r24, 0x01	; 1
 212:	09 f0       	breq	.+2      	; 0x216 <DIO_SetPinDirection+0x19a>
			case 1 : Set_Bit(DDRD,(PinNum-24));
			break;
			case 0 : Clear_Bit(DDRD,(PinNum-24));
			break;
			default :
			break ;
 214:	31 c0       	rjmp	.+98     	; 0x278 <DIO_SetPinDirection+0x1fc>
			break ;
		}
	}
	else if(PinNum >=24 && PinNum <=31){
		switch(PinDirection){
			case 1 : Set_Bit(DDRD,(PinNum-24));
 216:	81 e3       	ldi	r24, 0x31	; 49
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	21 e3       	ldi	r18, 0x31	; 49
 21c:	30 e0       	ldi	r19, 0x00	; 0
 21e:	f9 01       	movw	r30, r18
 220:	20 81       	ld	r18, Z
 222:	62 2f       	mov	r22, r18
 224:	29 81       	ldd	r18, Y+1	; 0x01
 226:	22 2f       	mov	r18, r18
 228:	30 e0       	ldi	r19, 0x00	; 0
 22a:	a9 01       	movw	r20, r18
 22c:	48 51       	subi	r20, 0x18	; 24
 22e:	51 09       	sbc	r21, r1
 230:	21 e0       	ldi	r18, 0x01	; 1
 232:	30 e0       	ldi	r19, 0x00	; 0
 234:	02 c0       	rjmp	.+4      	; 0x23a <DIO_SetPinDirection+0x1be>
 236:	22 0f       	add	r18, r18
 238:	33 1f       	adc	r19, r19
 23a:	4a 95       	dec	r20
 23c:	e2 f7       	brpl	.-8      	; 0x236 <DIO_SetPinDirection+0x1ba>
 23e:	26 2b       	or	r18, r22
 240:	fc 01       	movw	r30, r24
 242:	20 83       	st	Z, r18
			break;
 244:	19 c0       	rjmp	.+50     	; 0x278 <DIO_SetPinDirection+0x1fc>
			case 0 : Clear_Bit(DDRD,(PinNum-24));
 246:	81 e3       	ldi	r24, 0x31	; 49
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	21 e3       	ldi	r18, 0x31	; 49
 24c:	30 e0       	ldi	r19, 0x00	; 0
 24e:	f9 01       	movw	r30, r18
 250:	20 81       	ld	r18, Z
 252:	62 2f       	mov	r22, r18
 254:	29 81       	ldd	r18, Y+1	; 0x01
 256:	22 2f       	mov	r18, r18
 258:	30 e0       	ldi	r19, 0x00	; 0
 25a:	a9 01       	movw	r20, r18
 25c:	48 51       	subi	r20, 0x18	; 24
 25e:	51 09       	sbc	r21, r1
 260:	21 e0       	ldi	r18, 0x01	; 1
 262:	30 e0       	ldi	r19, 0x00	; 0
 264:	02 c0       	rjmp	.+4      	; 0x26a <DIO_SetPinDirection+0x1ee>
 266:	22 0f       	add	r18, r18
 268:	33 1f       	adc	r19, r19
 26a:	4a 95       	dec	r20
 26c:	e2 f7       	brpl	.-8      	; 0x266 <DIO_SetPinDirection+0x1ea>
 26e:	20 95       	com	r18
 270:	26 23       	and	r18, r22
 272:	fc 01       	movw	r30, r24
 274:	20 83       	st	Z, r18
			break;
 276:	00 00       	nop
			default :
			break ;
		}
	}
}
 278:	00 00       	nop
 27a:	0f 90       	pop	r0
 27c:	0f 90       	pop	r0
 27e:	df 91       	pop	r29
 280:	cf 91       	pop	r28
 282:	08 95       	ret

00000284 <DIO_togglePin>:

void DIO_togglePin(uint8 PinNum){
 284:	cf 93       	push	r28
 286:	df 93       	push	r29
 288:	1f 92       	push	r1
 28a:	cd b7       	in	r28, 0x3d	; 61
 28c:	de b7       	in	r29, 0x3e	; 62
 28e:	89 83       	std	Y+1, r24	; 0x01
	if(PinNum >=0 && PinNum <=7){
 290:	89 81       	ldd	r24, Y+1	; 0x01
 292:	88 30       	cpi	r24, 0x08	; 8
 294:	a8 f4       	brcc	.+42     	; 0x2c0 <DIO_togglePin+0x3c>
		Togle_Bit(PORTA,PinNum);
 296:	8b e3       	ldi	r24, 0x3B	; 59
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	2b e3       	ldi	r18, 0x3B	; 59
 29c:	30 e0       	ldi	r19, 0x00	; 0
 29e:	f9 01       	movw	r30, r18
 2a0:	20 81       	ld	r18, Z
 2a2:	62 2f       	mov	r22, r18
 2a4:	29 81       	ldd	r18, Y+1	; 0x01
 2a6:	42 2f       	mov	r20, r18
 2a8:	50 e0       	ldi	r21, 0x00	; 0
 2aa:	21 e0       	ldi	r18, 0x01	; 1
 2ac:	30 e0       	ldi	r19, 0x00	; 0
 2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <DIO_togglePin+0x30>
 2b0:	22 0f       	add	r18, r18
 2b2:	33 1f       	adc	r19, r19
 2b4:	4a 95       	dec	r20
 2b6:	e2 f7       	brpl	.-8      	; 0x2b0 <DIO_togglePin+0x2c>
 2b8:	26 27       	eor	r18, r22
 2ba:	fc 01       	movw	r30, r24
 2bc:	20 83       	st	Z, r18
		Togle_Bit(PORTC,(PinNum-16));
	}
	else if(PinNum >=24 && PinNum <=31){
		Togle_Bit(PIND,(PinNum-24));
	}
}
 2be:	5a c0       	rjmp	.+180    	; 0x374 <DIO_togglePin+0xf0>

void DIO_togglePin(uint8 PinNum){
	if(PinNum >=0 && PinNum <=7){
		Togle_Bit(PORTA,PinNum);
	}
	else if(PinNum >=8 && PinNum <=15){
 2c0:	89 81       	ldd	r24, Y+1	; 0x01
 2c2:	88 30       	cpi	r24, 0x08	; 8
 2c4:	d8 f0       	brcs	.+54     	; 0x2fc <DIO_togglePin+0x78>
 2c6:	89 81       	ldd	r24, Y+1	; 0x01
 2c8:	80 31       	cpi	r24, 0x10	; 16
 2ca:	c0 f4       	brcc	.+48     	; 0x2fc <DIO_togglePin+0x78>
		Togle_Bit(PORTB,(PinNum-8));
 2cc:	88 e3       	ldi	r24, 0x38	; 56
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	28 e3       	ldi	r18, 0x38	; 56
 2d2:	30 e0       	ldi	r19, 0x00	; 0
 2d4:	f9 01       	movw	r30, r18
 2d6:	20 81       	ld	r18, Z
 2d8:	62 2f       	mov	r22, r18
 2da:	29 81       	ldd	r18, Y+1	; 0x01
 2dc:	22 2f       	mov	r18, r18
 2de:	30 e0       	ldi	r19, 0x00	; 0
 2e0:	a9 01       	movw	r20, r18
 2e2:	48 50       	subi	r20, 0x08	; 8
 2e4:	51 09       	sbc	r21, r1
 2e6:	21 e0       	ldi	r18, 0x01	; 1
 2e8:	30 e0       	ldi	r19, 0x00	; 0
 2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <DIO_togglePin+0x6c>
 2ec:	22 0f       	add	r18, r18
 2ee:	33 1f       	adc	r19, r19
 2f0:	4a 95       	dec	r20
 2f2:	e2 f7       	brpl	.-8      	; 0x2ec <DIO_togglePin+0x68>
 2f4:	26 27       	eor	r18, r22
 2f6:	fc 01       	movw	r30, r24
 2f8:	20 83       	st	Z, r18
 2fa:	3c c0       	rjmp	.+120    	; 0x374 <DIO_togglePin+0xf0>
	}
	else if(PinNum >=16 && PinNum <=23){
 2fc:	89 81       	ldd	r24, Y+1	; 0x01
 2fe:	80 31       	cpi	r24, 0x10	; 16
 300:	d8 f0       	brcs	.+54     	; 0x338 <DIO_togglePin+0xb4>
 302:	89 81       	ldd	r24, Y+1	; 0x01
 304:	88 31       	cpi	r24, 0x18	; 24
 306:	c0 f4       	brcc	.+48     	; 0x338 <DIO_togglePin+0xb4>
		Togle_Bit(PORTC,(PinNum-16));
 308:	85 e3       	ldi	r24, 0x35	; 53
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	25 e3       	ldi	r18, 0x35	; 53
 30e:	30 e0       	ldi	r19, 0x00	; 0
 310:	f9 01       	movw	r30, r18
 312:	20 81       	ld	r18, Z
 314:	62 2f       	mov	r22, r18
 316:	29 81       	ldd	r18, Y+1	; 0x01
 318:	22 2f       	mov	r18, r18
 31a:	30 e0       	ldi	r19, 0x00	; 0
 31c:	a9 01       	movw	r20, r18
 31e:	40 51       	subi	r20, 0x10	; 16
 320:	51 09       	sbc	r21, r1
 322:	21 e0       	ldi	r18, 0x01	; 1
 324:	30 e0       	ldi	r19, 0x00	; 0
 326:	02 c0       	rjmp	.+4      	; 0x32c <DIO_togglePin+0xa8>
 328:	22 0f       	add	r18, r18
 32a:	33 1f       	adc	r19, r19
 32c:	4a 95       	dec	r20
 32e:	e2 f7       	brpl	.-8      	; 0x328 <DIO_togglePin+0xa4>
 330:	26 27       	eor	r18, r22
 332:	fc 01       	movw	r30, r24
 334:	20 83       	st	Z, r18
 336:	1e c0       	rjmp	.+60     	; 0x374 <DIO_togglePin+0xf0>
	}
	else if(PinNum >=24 && PinNum <=31){
 338:	89 81       	ldd	r24, Y+1	; 0x01
 33a:	88 31       	cpi	r24, 0x18	; 24
 33c:	d8 f0       	brcs	.+54     	; 0x374 <DIO_togglePin+0xf0>
 33e:	89 81       	ldd	r24, Y+1	; 0x01
 340:	80 32       	cpi	r24, 0x20	; 32
 342:	c0 f4       	brcc	.+48     	; 0x374 <DIO_togglePin+0xf0>
		Togle_Bit(PIND,(PinNum-24));
 344:	80 e3       	ldi	r24, 0x30	; 48
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	20 e3       	ldi	r18, 0x30	; 48
 34a:	30 e0       	ldi	r19, 0x00	; 0
 34c:	f9 01       	movw	r30, r18
 34e:	20 81       	ld	r18, Z
 350:	62 2f       	mov	r22, r18
 352:	29 81       	ldd	r18, Y+1	; 0x01
 354:	22 2f       	mov	r18, r18
 356:	30 e0       	ldi	r19, 0x00	; 0
 358:	a9 01       	movw	r20, r18
 35a:	48 51       	subi	r20, 0x18	; 24
 35c:	51 09       	sbc	r21, r1
 35e:	21 e0       	ldi	r18, 0x01	; 1
 360:	30 e0       	ldi	r19, 0x00	; 0
 362:	02 c0       	rjmp	.+4      	; 0x368 <DIO_togglePin+0xe4>
 364:	22 0f       	add	r18, r18
 366:	33 1f       	adc	r19, r19
 368:	4a 95       	dec	r20
 36a:	e2 f7       	brpl	.-8      	; 0x364 <DIO_togglePin+0xe0>
 36c:	26 27       	eor	r18, r22
 36e:	fc 01       	movw	r30, r24
 370:	20 83       	st	Z, r18
	}
}
 372:	00 c0       	rjmp	.+0      	; 0x374 <DIO_togglePin+0xf0>
 374:	00 00       	nop
 376:	0f 90       	pop	r0
 378:	df 91       	pop	r29
 37a:	cf 91       	pop	r28
 37c:	08 95       	ret

0000037e <main>:
#include <avr/io.h>
#include "TTC.h"
#include "Types.h"

int main(void)
{
 37e:	cf 93       	push	r28
 380:	df 93       	push	r29
 382:	cd b7       	in	r28, 0x3d	; 61
 384:	de b7       	in	r29, 0x3e	; 62
	/*  identifying all led direction as outputs
	- call schedular 
	*/
    DIO_SetPinDirection(led0,1);
 386:	61 e0       	ldi	r22, 0x01	; 1
 388:	8c e0       	ldi	r24, 0x0C	; 12
 38a:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_SetPinDirection>
	DIO_SetPinDirection(led1,1);
 38e:	61 e0       	ldi	r22, 0x01	; 1
 390:	8d e0       	ldi	r24, 0x0D	; 13
 392:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_SetPinDirection>
	DIO_SetPinDirection(led2,1);
 396:	61 e0       	ldi	r22, 0x01	; 1
 398:	8e e0       	ldi	r24, 0x0E	; 14
 39a:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_SetPinDirection>
	schedulerInit();
 39e:	0e 94 7d 02 	call	0x4fa	; 0x4fa <schedulerInit>
    Scheduler_Start();
 3a2:	0e 94 a0 02 	call	0x540	; 0x540 <Scheduler_Start>
 3a6:	80 e0       	ldi	r24, 0x00	; 0
 3a8:	90 e0       	ldi	r25, 0x00	; 0
}
 3aa:	df 91       	pop	r29
 3ac:	cf 91       	pop	r28
 3ae:	08 95       	ret

000003b0 <task1>:

		
	

/* task one runs periodically every 3 sec it toggle led0 every 3 sec */	
void task1 (void){
 3b0:	cf 93       	push	r28
 3b2:	df 93       	push	r29
 3b4:	cd b7       	in	r28, 0x3d	; 61
 3b6:	de b7       	in	r29, 0x3e	; 62
	DIO_togglePin(led0);
 3b8:	8c e0       	ldi	r24, 0x0C	; 12
 3ba:	0e 94 42 01 	call	0x284	; 0x284 <DIO_togglePin>
	
}
 3be:	00 00       	nop
 3c0:	df 91       	pop	r29
 3c2:	cf 91       	pop	r28
 3c4:	08 95       	ret

000003c6 <task2>:
/* task one runs periodically every 4 sec it toggle led1 every 4 sec */	
void task2 (void){
 3c6:	cf 93       	push	r28
 3c8:	df 93       	push	r29
 3ca:	cd b7       	in	r28, 0x3d	; 61
 3cc:	de b7       	in	r29, 0x3e	; 62
	
	
	DIO_togglePin(led1);
 3ce:	8d e0       	ldi	r24, 0x0D	; 13
 3d0:	0e 94 42 01 	call	0x284	; 0x284 <DIO_togglePin>
	
	
}
 3d4:	00 00       	nop
 3d6:	df 91       	pop	r29
 3d8:	cf 91       	pop	r28
 3da:	08 95       	ret

000003dc <task3>:
/* task that toggle led 2 every 5 sec */
void task3 (void){
 3dc:	cf 93       	push	r28
 3de:	df 93       	push	r29
 3e0:	cd b7       	in	r28, 0x3d	; 61
 3e2:	de b7       	in	r29, 0x3e	; 62
	DIO_togglePin(led2);
 3e4:	8e e0       	ldi	r24, 0x0E	; 14
 3e6:	0e 94 42 01 	call	0x284	; 0x284 <DIO_togglePin>
	
	}
 3ea:	00 00       	nop
 3ec:	df 91       	pop	r29
 3ee:	cf 91       	pop	r28
 3f0:	08 95       	ret

000003f2 <timer_init>:
#include <avr/interrupt.h>

static volatile void  (*gcall_back) (void) = NULL;


void timer_init(uint8 OCR_val){
 3f2:	cf 93       	push	r28
 3f4:	df 93       	push	r29
 3f6:	1f 92       	push	r1
 3f8:	cd b7       	in	r28, 0x3d	; 61
 3fa:	de b7       	in	r29, 0x3e	; 62
 3fc:	89 83       	std	Y+1, r24	; 0x01
	/* FRC0 = 1 & CTC MODE IS ON & PRECSACLE 64 */
	
	TCNT0 = FALSE;
 3fe:	82 e5       	ldi	r24, 0x52	; 82
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	fc 01       	movw	r30, r24
 404:	10 82       	st	Z, r1
	OCR0 = OCR_val;
 406:	8c e5       	ldi	r24, 0x5C	; 92
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	29 81       	ldd	r18, Y+1	; 0x01
 40c:	fc 01       	movw	r30, r24
 40e:	20 83       	st	Z, r18
	TIMSK |= (1<<OCIE0);
 410:	89 e5       	ldi	r24, 0x59	; 89
 412:	90 e0       	ldi	r25, 0x00	; 0
 414:	29 e5       	ldi	r18, 0x59	; 89
 416:	30 e0       	ldi	r19, 0x00	; 0
 418:	f9 01       	movw	r30, r18
 41a:	20 81       	ld	r18, Z
 41c:	22 60       	ori	r18, 0x02	; 2
 41e:	fc 01       	movw	r30, r24
 420:	20 83       	st	Z, r18
	sei();
 422:	78 94       	sei
	TCCR0 |= (1<<FOC0) | (1<<WGM01) |(1<<CS00) | (1<<CS01);
 424:	83 e5       	ldi	r24, 0x53	; 83
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	23 e5       	ldi	r18, 0x53	; 83
 42a:	30 e0       	ldi	r19, 0x00	; 0
 42c:	f9 01       	movw	r30, r18
 42e:	20 81       	ld	r18, Z
 430:	2b 68       	ori	r18, 0x8B	; 139
 432:	fc 01       	movw	r30, r24
 434:	20 83       	st	Z, r18
}
 436:	00 00       	nop
 438:	0f 90       	pop	r0
 43a:	df 91       	pop	r29
 43c:	cf 91       	pop	r28
 43e:	08 95       	ret

00000440 <set_callback>:


void set_callback(p_fun fun)
{
 440:	cf 93       	push	r28
 442:	df 93       	push	r29
 444:	00 d0       	rcall	.+0      	; 0x446 <set_callback+0x6>
 446:	cd b7       	in	r28, 0x3d	; 61
 448:	de b7       	in	r29, 0x3e	; 62
 44a:	9a 83       	std	Y+2, r25	; 0x02
 44c:	89 83       	std	Y+1, r24	; 0x01
	gcall_back = fun;
 44e:	89 81       	ldd	r24, Y+1	; 0x01
 450:	9a 81       	ldd	r25, Y+2	; 0x02
 452:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
 456:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
	
}
 45a:	00 00       	nop
 45c:	0f 90       	pop	r0
 45e:	0f 90       	pop	r0
 460:	df 91       	pop	r29
 462:	cf 91       	pop	r28
 464:	08 95       	ret

00000466 <__vector_10>:
/* interrupt code */
 ISR (TIMER0_COMP_vect)
 {
 466:	1f 92       	push	r1
 468:	0f 92       	push	r0
 46a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 46e:	0f 92       	push	r0
 470:	11 24       	eor	r1, r1
 472:	2f 93       	push	r18
 474:	3f 93       	push	r19
 476:	4f 93       	push	r20
 478:	5f 93       	push	r21
 47a:	6f 93       	push	r22
 47c:	7f 93       	push	r23
 47e:	8f 93       	push	r24
 480:	9f 93       	push	r25
 482:	af 93       	push	r26
 484:	bf 93       	push	r27
 486:	ef 93       	push	r30
 488:	ff 93       	push	r31
 48a:	cf 93       	push	r28
 48c:	df 93       	push	r29
 48e:	cd b7       	in	r28, 0x3d	; 61
 490:	de b7       	in	r29, 0x3e	; 62
	  /* increase global flag that tells all files about timing */
	 NewTickFlag ++;
 492:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <NewTickFlag>
 496:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <NewTickFlag+0x1>
 49a:	a0 91 64 00 	lds	r26, 0x0064	; 0x800064 <NewTickFlag+0x2>
 49e:	b0 91 65 00 	lds	r27, 0x0065	; 0x800065 <NewTickFlag+0x3>
 4a2:	01 96       	adiw	r24, 0x01	; 1
 4a4:	a1 1d       	adc	r26, r1
 4a6:	b1 1d       	adc	r27, r1
 4a8:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <NewTickFlag>
 4ac:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <NewTickFlag+0x1>
 4b0:	a0 93 64 00 	sts	0x0064, r26	; 0x800064 <NewTickFlag+0x2>
 4b4:	b0 93 65 00 	sts	0x0065, r27	; 0x800065 <NewTickFlag+0x3>
	 if(gcall_back != NULL){
 4b8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 4bc:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
 4c0:	89 2b       	or	r24, r25
 4c2:	31 f0       	breq	.+12     	; 0x4d0 <__vector_10+0x6a>
	 gcall_back();
 4c4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 4c8:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
 4cc:	fc 01       	movw	r30, r24
 4ce:	09 95       	icall
	
	 }
	
 4d0:	00 00       	nop
 4d2:	df 91       	pop	r29
 4d4:	cf 91       	pop	r28
 4d6:	ff 91       	pop	r31
 4d8:	ef 91       	pop	r30
 4da:	bf 91       	pop	r27
 4dc:	af 91       	pop	r26
 4de:	9f 91       	pop	r25
 4e0:	8f 91       	pop	r24
 4e2:	7f 91       	pop	r23
 4e4:	6f 91       	pop	r22
 4e6:	5f 91       	pop	r21
 4e8:	4f 91       	pop	r20
 4ea:	3f 91       	pop	r19
 4ec:	2f 91       	pop	r18
 4ee:	0f 90       	pop	r0
 4f0:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 4f4:	0f 90       	pop	r0
 4f6:	1f 90       	pop	r1
 4f8:	18 95       	reti

000004fa <schedulerInit>:
* Function name :-   schedulerInit                                                                      *          *
* function job :-    initialize scheduler by initializing all tasks                                     *                                           *
* function arguments :-         N/A                                                                     *
* function return :-            N/A                                                                     *
********************************************************************************************************/
void schedulerInit(void){
 4fa:	cf 93       	push	r28
 4fc:	df 93       	push	r29
 4fe:	cd b7       	in	r28, 0x3d	; 61
 500:	de b7       	in	r29, 0x3e	; 62
	uint8 temp ;
	 scheduler_Add_Task(task1,3000);
 502:	48 eb       	ldi	r20, 0xB8	; 184
 504:	5b e0       	ldi	r21, 0x0B	; 11
 506:	60 e0       	ldi	r22, 0x00	; 0
 508:	70 e0       	ldi	r23, 0x00	; 0
 50a:	88 ed       	ldi	r24, 0xD8	; 216
 50c:	91 e0       	ldi	r25, 0x01	; 1
 50e:	0e 94 61 03 	call	0x6c2	; 0x6c2 <scheduler_Add_Task>
	
	 scheduler_Add_Task(task2,4000);
 512:	40 ea       	ldi	r20, 0xA0	; 160
 514:	5f e0       	ldi	r21, 0x0F	; 15
 516:	60 e0       	ldi	r22, 0x00	; 0
 518:	70 e0       	ldi	r23, 0x00	; 0
 51a:	83 ee       	ldi	r24, 0xE3	; 227
 51c:	91 e0       	ldi	r25, 0x01	; 1
 51e:	0e 94 61 03 	call	0x6c2	; 0x6c2 <scheduler_Add_Task>
	 
	 scheduler_Add_Task(task3,5000);
 522:	48 e8       	ldi	r20, 0x88	; 136
 524:	53 e1       	ldi	r21, 0x13	; 19
 526:	60 e0       	ldi	r22, 0x00	; 0
 528:	70 e0       	ldi	r23, 0x00	; 0
 52a:	8e ee       	ldi	r24, 0xEE	; 238
 52c:	91 e0       	ldi	r25, 0x01	; 1
 52e:	0e 94 61 03 	call	0x6c2	; 0x6c2 <scheduler_Add_Task>
	timer_init(200);
 532:	88 ec       	ldi	r24, 0xC8	; 200
 534:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <timer_init>
	return ;
 538:	00 00       	nop
}
 53a:	df 91       	pop	r29
 53c:	cf 91       	pop	r28
 53e:	08 95       	ret

00000540 <Scheduler_Start>:

/* main function that handle tasks and run them according to requirements */
void Scheduler_Start (void)
{
 540:	cf 93       	push	r28
 542:	df 93       	push	r29
 544:	cd b7       	in	r28, 0x3d	; 61
 546:	de b7       	in	r29, 0x3e	; 62
	
	
	while(1){
		set_callback(set_callback_flag);
 548:	86 e5       	ldi	r24, 0x56	; 86
 54a:	93 e0       	ldi	r25, 0x03	; 3
 54c:	0e 94 20 02 	call	0x440	; 0x440 <set_callback>
		if( g_flag == TRUE){
 550:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <g_flag>
 554:	81 30       	cpi	r24, 0x01	; 1
 556:	c1 f7       	brne	.-16     	; 0x548 <Scheduler_Start+0x8>
	pre_filled_arr(task_arr,g_index);
 558:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <g_index>
 55c:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <g_index+0x1>
 560:	a0 91 68 00 	lds	r26, 0x0068	; 0x800068 <g_index+0x2>
 564:	b0 91 69 00 	lds	r27, 0x0069	; 0x800069 <g_index+0x3>
 568:	ac 01       	movw	r20, r24
 56a:	bd 01       	movw	r22, r26
 56c:	8b e6       	ldi	r24, 0x6B	; 107
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	0e 94 bd 02 	call	0x57a	; 0x57a <pre_filled_arr>
	g_flag = FALSE ;
 574:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <g_flag>
		}
   
		}
 578:	e7 cf       	rjmp	.-50     	; 0x548 <Scheduler_Start+0x8>

0000057a <pre_filled_arr>:
}
/* function responible for calling tasks that inside task file */

void pre_filled_arr(TCB arr_fun[],uint32 size){
 57a:	cf 93       	push	r28
 57c:	df 93       	push	r29
 57e:	cd b7       	in	r28, 0x3d	; 61
 580:	de b7       	in	r29, 0x3e	; 62
 582:	2a 97       	sbiw	r28, 0x0a	; 10
 584:	0f b6       	in	r0, 0x3f	; 63
 586:	f8 94       	cli
 588:	de bf       	out	0x3e, r29	; 62
 58a:	0f be       	out	0x3f, r0	; 63
 58c:	cd bf       	out	0x3d, r28	; 61
 58e:	9e 83       	std	Y+6, r25	; 0x06
 590:	8d 83       	std	Y+5, r24	; 0x05
 592:	4f 83       	std	Y+7, r20	; 0x07
 594:	58 87       	std	Y+8, r21	; 0x08
 596:	69 87       	std	Y+9, r22	; 0x09
 598:	7a 87       	std	Y+10, r23	; 0x0a
    /* - call task by their order */
	uint32 index;
	for(index = 0;index<size;index++){
 59a:	19 82       	std	Y+1, r1	; 0x01
 59c:	1a 82       	std	Y+2, r1	; 0x02
 59e:	1b 82       	std	Y+3, r1	; 0x03
 5a0:	1c 82       	std	Y+4, r1	; 0x04
 5a2:	6c c0       	rjmp	.+216    	; 0x67c <pre_filled_arr+0x102>
	if(arr_fun[index].remaining_ticks == FALSE){
 5a4:	29 81       	ldd	r18, Y+1	; 0x01
 5a6:	3a 81       	ldd	r19, Y+2	; 0x02
 5a8:	4b e0       	ldi	r20, 0x0B	; 11
 5aa:	42 9f       	mul	r20, r18
 5ac:	c0 01       	movw	r24, r0
 5ae:	43 9f       	mul	r20, r19
 5b0:	90 0d       	add	r25, r0
 5b2:	11 24       	eor	r1, r1
 5b4:	2d 81       	ldd	r18, Y+5	; 0x05
 5b6:	3e 81       	ldd	r19, Y+6	; 0x06
 5b8:	82 0f       	add	r24, r18
 5ba:	93 1f       	adc	r25, r19
 5bc:	fc 01       	movw	r30, r24
 5be:	86 81       	ldd	r24, Z+6	; 0x06
 5c0:	97 81       	ldd	r25, Z+7	; 0x07
 5c2:	a0 85       	ldd	r26, Z+8	; 0x08
 5c4:	b1 85       	ldd	r27, Z+9	; 0x09
 5c6:	89 2b       	or	r24, r25
 5c8:	8a 2b       	or	r24, r26
 5ca:	8b 2b       	or	r24, r27
 5cc:	99 f5       	brne	.+102    	; 0x634 <pre_filled_arr+0xba>
		arr_fun[index].ptr_task_fun();
 5ce:	29 81       	ldd	r18, Y+1	; 0x01
 5d0:	3a 81       	ldd	r19, Y+2	; 0x02
 5d2:	4b e0       	ldi	r20, 0x0B	; 11
 5d4:	42 9f       	mul	r20, r18
 5d6:	c0 01       	movw	r24, r0
 5d8:	43 9f       	mul	r20, r19
 5da:	90 0d       	add	r25, r0
 5dc:	11 24       	eor	r1, r1
 5de:	2d 81       	ldd	r18, Y+5	; 0x05
 5e0:	3e 81       	ldd	r19, Y+6	; 0x06
 5e2:	82 0f       	add	r24, r18
 5e4:	93 1f       	adc	r25, r19
 5e6:	fc 01       	movw	r30, r24
 5e8:	80 81       	ld	r24, Z
 5ea:	91 81       	ldd	r25, Z+1	; 0x01
 5ec:	fc 01       	movw	r30, r24
 5ee:	09 95       	icall
		arr_fun[index].remaining_ticks = arr_fun[index].priodic_time ;
 5f0:	29 81       	ldd	r18, Y+1	; 0x01
 5f2:	3a 81       	ldd	r19, Y+2	; 0x02
 5f4:	4b e0       	ldi	r20, 0x0B	; 11
 5f6:	42 9f       	mul	r20, r18
 5f8:	c0 01       	movw	r24, r0
 5fa:	43 9f       	mul	r20, r19
 5fc:	90 0d       	add	r25, r0
 5fe:	11 24       	eor	r1, r1
 600:	2d 81       	ldd	r18, Y+5	; 0x05
 602:	3e 81       	ldd	r19, Y+6	; 0x06
 604:	28 0f       	add	r18, r24
 606:	39 1f       	adc	r19, r25
 608:	49 81       	ldd	r20, Y+1	; 0x01
 60a:	5a 81       	ldd	r21, Y+2	; 0x02
 60c:	6b e0       	ldi	r22, 0x0B	; 11
 60e:	64 9f       	mul	r22, r20
 610:	c0 01       	movw	r24, r0
 612:	65 9f       	mul	r22, r21
 614:	90 0d       	add	r25, r0
 616:	11 24       	eor	r1, r1
 618:	4d 81       	ldd	r20, Y+5	; 0x05
 61a:	5e 81       	ldd	r21, Y+6	; 0x06
 61c:	84 0f       	add	r24, r20
 61e:	95 1f       	adc	r25, r21
 620:	fc 01       	movw	r30, r24
 622:	82 81       	ldd	r24, Z+2	; 0x02
 624:	93 81       	ldd	r25, Z+3	; 0x03
 626:	a4 81       	ldd	r26, Z+4	; 0x04
 628:	b5 81       	ldd	r27, Z+5	; 0x05
 62a:	f9 01       	movw	r30, r18
 62c:	86 83       	std	Z+6, r24	; 0x06
 62e:	97 83       	std	Z+7, r25	; 0x07
 630:	a0 87       	std	Z+8, r26	; 0x08
 632:	b1 87       	std	Z+9, r27	; 0x09
	}
	else {  } 
		arr_fun[index].remaining_ticks -- ; }
 634:	29 81       	ldd	r18, Y+1	; 0x01
 636:	3a 81       	ldd	r19, Y+2	; 0x02
 638:	4b e0       	ldi	r20, 0x0B	; 11
 63a:	42 9f       	mul	r20, r18
 63c:	c0 01       	movw	r24, r0
 63e:	43 9f       	mul	r20, r19
 640:	90 0d       	add	r25, r0
 642:	11 24       	eor	r1, r1
 644:	2d 81       	ldd	r18, Y+5	; 0x05
 646:	3e 81       	ldd	r19, Y+6	; 0x06
 648:	28 0f       	add	r18, r24
 64a:	39 1f       	adc	r19, r25
 64c:	f9 01       	movw	r30, r18
 64e:	86 81       	ldd	r24, Z+6	; 0x06
 650:	97 81       	ldd	r25, Z+7	; 0x07
 652:	a0 85       	ldd	r26, Z+8	; 0x08
 654:	b1 85       	ldd	r27, Z+9	; 0x09
 656:	01 97       	sbiw	r24, 0x01	; 1
 658:	a1 09       	sbc	r26, r1
 65a:	b1 09       	sbc	r27, r1
 65c:	f9 01       	movw	r30, r18
 65e:	86 83       	std	Z+6, r24	; 0x06
 660:	97 83       	std	Z+7, r25	; 0x07
 662:	a0 87       	std	Z+8, r26	; 0x08
 664:	b1 87       	std	Z+9, r27	; 0x09
/* function responible for calling tasks that inside task file */

void pre_filled_arr(TCB arr_fun[],uint32 size){
    /* - call task by their order */
	uint32 index;
	for(index = 0;index<size;index++){
 666:	89 81       	ldd	r24, Y+1	; 0x01
 668:	9a 81       	ldd	r25, Y+2	; 0x02
 66a:	ab 81       	ldd	r26, Y+3	; 0x03
 66c:	bc 81       	ldd	r27, Y+4	; 0x04
 66e:	01 96       	adiw	r24, 0x01	; 1
 670:	a1 1d       	adc	r26, r1
 672:	b1 1d       	adc	r27, r1
 674:	89 83       	std	Y+1, r24	; 0x01
 676:	9a 83       	std	Y+2, r25	; 0x02
 678:	ab 83       	std	Y+3, r26	; 0x03
 67a:	bc 83       	std	Y+4, r27	; 0x04
 67c:	29 81       	ldd	r18, Y+1	; 0x01
 67e:	3a 81       	ldd	r19, Y+2	; 0x02
 680:	4b 81       	ldd	r20, Y+3	; 0x03
 682:	5c 81       	ldd	r21, Y+4	; 0x04
 684:	8f 81       	ldd	r24, Y+7	; 0x07
 686:	98 85       	ldd	r25, Y+8	; 0x08
 688:	a9 85       	ldd	r26, Y+9	; 0x09
 68a:	ba 85       	ldd	r27, Y+10	; 0x0a
 68c:	28 17       	cp	r18, r24
 68e:	39 07       	cpc	r19, r25
 690:	4a 07       	cpc	r20, r26
 692:	5b 07       	cpc	r21, r27
 694:	08 f4       	brcc	.+2      	; 0x698 <pre_filled_arr+0x11e>
 696:	86 cf       	rjmp	.-244    	; 0x5a4 <pre_filled_arr+0x2a>
		arr_fun[index].remaining_ticks = arr_fun[index].priodic_time ;
	}
	else {  } 
		arr_fun[index].remaining_ticks -- ; }
	
}
 698:	00 00       	nop
 69a:	2a 96       	adiw	r28, 0x0a	; 10
 69c:	0f b6       	in	r0, 0x3f	; 63
 69e:	f8 94       	cli
 6a0:	de bf       	out	0x3e, r29	; 62
 6a2:	0f be       	out	0x3f, r0	; 63
 6a4:	cd bf       	out	0x3d, r28	; 61
 6a6:	df 91       	pop	r29
 6a8:	cf 91       	pop	r28
 6aa:	08 95       	ret

000006ac <set_callback_flag>:

void set_callback_flag(void){
 6ac:	cf 93       	push	r28
 6ae:	df 93       	push	r29
 6b0:	cd b7       	in	r28, 0x3d	; 61
 6b2:	de b7       	in	r29, 0x3e	; 62
	g_flag = TRUE ;
 6b4:	81 e0       	ldi	r24, 0x01	; 1
 6b6:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <g_flag>
}
 6ba:	00 00       	nop
 6bc:	df 91       	pop	r29
 6be:	cf 91       	pop	r28
 6c0:	08 95       	ret

000006c2 <scheduler_Add_Task>:
* function job :-                                                                                    *
* function arguments :-                                                                              *
* function return :-                                                                                 *
*****************************************************************************************************/
uint8 scheduler_Add_Task(ptr_fun new_task,uint32 period)
{
 6c2:	cf 93       	push	r28
 6c4:	df 93       	push	r29
 6c6:	00 d0       	rcall	.+0      	; 0x6c8 <scheduler_Add_Task+0x6>
 6c8:	00 d0       	rcall	.+0      	; 0x6ca <scheduler_Add_Task+0x8>
 6ca:	00 d0       	rcall	.+0      	; 0x6cc <scheduler_Add_Task+0xa>
 6cc:	cd b7       	in	r28, 0x3d	; 61
 6ce:	de b7       	in	r29, 0x3e	; 62
 6d0:	9a 83       	std	Y+2, r25	; 0x02
 6d2:	89 83       	std	Y+1, r24	; 0x01
 6d4:	4b 83       	std	Y+3, r20	; 0x03
 6d6:	5c 83       	std	Y+4, r21	; 0x04
 6d8:	6d 83       	std	Y+5, r22	; 0x05
 6da:	7e 83       	std	Y+6, r23	; 0x06
	if( g_index < max_size ){
 6dc:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <g_index>
 6e0:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <g_index+0x1>
 6e4:	a0 91 68 00 	lds	r26, 0x0068	; 0x800068 <g_index+0x2>
 6e8:	b0 91 69 00 	lds	r27, 0x0069	; 0x800069 <g_index+0x3>
 6ec:	03 97       	sbiw	r24, 0x03	; 3
 6ee:	a1 05       	cpc	r26, r1
 6f0:	b1 05       	cpc	r27, r1
 6f2:	08 f0       	brcs	.+2      	; 0x6f6 <scheduler_Add_Task+0x34>
 6f4:	61 c0       	rjmp	.+194    	; 0x7b8 <scheduler_Add_Task+0xf6>
		task_arr[g_index].ptr_task_fun = new_task ;
 6f6:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <g_index>
 6fa:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <g_index+0x1>
 6fe:	a0 91 68 00 	lds	r26, 0x0068	; 0x800068 <g_index+0x2>
 702:	b0 91 69 00 	lds	r27, 0x0069	; 0x800069 <g_index+0x3>
 706:	9c 01       	movw	r18, r24
 708:	4b e0       	ldi	r20, 0x0B	; 11
 70a:	42 9f       	mul	r20, r18
 70c:	c0 01       	movw	r24, r0
 70e:	43 9f       	mul	r20, r19
 710:	90 0d       	add	r25, r0
 712:	11 24       	eor	r1, r1
 714:	85 59       	subi	r24, 0x95	; 149
 716:	9f 4f       	sbci	r25, 0xFF	; 255
 718:	29 81       	ldd	r18, Y+1	; 0x01
 71a:	3a 81       	ldd	r19, Y+2	; 0x02
 71c:	fc 01       	movw	r30, r24
 71e:	31 83       	std	Z+1, r19	; 0x01
 720:	20 83       	st	Z, r18
		task_arr[g_index].priodic_time = period ;
 722:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <g_index>
 726:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <g_index+0x1>
 72a:	a0 91 68 00 	lds	r26, 0x0068	; 0x800068 <g_index+0x2>
 72e:	b0 91 69 00 	lds	r27, 0x0069	; 0x800069 <g_index+0x3>
 732:	9c 01       	movw	r18, r24
 734:	4b e0       	ldi	r20, 0x0B	; 11
 736:	42 9f       	mul	r20, r18
 738:	c0 01       	movw	r24, r0
 73a:	43 9f       	mul	r20, r19
 73c:	90 0d       	add	r25, r0
 73e:	11 24       	eor	r1, r1
 740:	9c 01       	movw	r18, r24
 742:	23 59       	subi	r18, 0x93	; 147
 744:	3f 4f       	sbci	r19, 0xFF	; 255
 746:	8b 81       	ldd	r24, Y+3	; 0x03
 748:	9c 81       	ldd	r25, Y+4	; 0x04
 74a:	ad 81       	ldd	r26, Y+5	; 0x05
 74c:	be 81       	ldd	r27, Y+6	; 0x06
 74e:	f9 01       	movw	r30, r18
 750:	80 83       	st	Z, r24
 752:	91 83       	std	Z+1, r25	; 0x01
 754:	a2 83       	std	Z+2, r26	; 0x02
 756:	b3 83       	std	Z+3, r27	; 0x03
		task_arr[g_index].remaining_ticks = period ;
 758:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <g_index>
 75c:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <g_index+0x1>
 760:	a0 91 68 00 	lds	r26, 0x0068	; 0x800068 <g_index+0x2>
 764:	b0 91 69 00 	lds	r27, 0x0069	; 0x800069 <g_index+0x3>
 768:	9c 01       	movw	r18, r24
 76a:	4b e0       	ldi	r20, 0x0B	; 11
 76c:	42 9f       	mul	r20, r18
 76e:	c0 01       	movw	r24, r0
 770:	43 9f       	mul	r20, r19
 772:	90 0d       	add	r25, r0
 774:	11 24       	eor	r1, r1
 776:	9c 01       	movw	r18, r24
 778:	2f 58       	subi	r18, 0x8F	; 143
 77a:	3f 4f       	sbci	r19, 0xFF	; 255
 77c:	8b 81       	ldd	r24, Y+3	; 0x03
 77e:	9c 81       	ldd	r25, Y+4	; 0x04
 780:	ad 81       	ldd	r26, Y+5	; 0x05
 782:	be 81       	ldd	r27, Y+6	; 0x06
 784:	f9 01       	movw	r30, r18
 786:	80 83       	st	Z, r24
 788:	91 83       	std	Z+1, r25	; 0x01
 78a:	a2 83       	std	Z+2, r26	; 0x02
 78c:	b3 83       	std	Z+3, r27	; 0x03
		
		g_index++;
 78e:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <g_index>
 792:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <g_index+0x1>
 796:	a0 91 68 00 	lds	r26, 0x0068	; 0x800068 <g_index+0x2>
 79a:	b0 91 69 00 	lds	r27, 0x0069	; 0x800069 <g_index+0x3>
 79e:	01 96       	adiw	r24, 0x01	; 1
 7a0:	a1 1d       	adc	r26, r1
 7a2:	b1 1d       	adc	r27, r1
 7a4:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <g_index>
 7a8:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <g_index+0x1>
 7ac:	a0 93 68 00 	sts	0x0068, r26	; 0x800068 <g_index+0x2>
 7b0:	b0 93 69 00 	sts	0x0069, r27	; 0x800069 <g_index+0x3>
		
		return TRUE ;
 7b4:	81 e0       	ldi	r24, 0x01	; 1
 7b6:	01 c0       	rjmp	.+2      	; 0x7ba <scheduler_Add_Task+0xf8>
	}
	return FALSE ;
 7b8:	80 e0       	ldi	r24, 0x00	; 0
}
 7ba:	26 96       	adiw	r28, 0x06	; 6
 7bc:	0f b6       	in	r0, 0x3f	; 63
 7be:	f8 94       	cli
 7c0:	de bf       	out	0x3e, r29	; 62
 7c2:	0f be       	out	0x3f, r0	; 63
 7c4:	cd bf       	out	0x3d, r28	; 61
 7c6:	df 91       	pop	r29
 7c8:	cf 91       	pop	r28
 7ca:	08 95       	ret

000007cc <_exit>:
 7cc:	f8 94       	cli

000007ce <__stop_program>:
 7ce:	ff cf       	rjmp	.-2      	; 0x7ce <__stop_program>
